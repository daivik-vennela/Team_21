<Version>1.0.1</Version>

<ProgrammingBlock type="functionCall" function="turnLeft">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">25</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short" default="50">100</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" default="motor10" typeDef="tMotor">motor11</Parameter>
        <Parameter name="quantity" type="float" default="1">1.5</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short" default="50">100</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" default="motor1" typeDef="tMotor">motor11</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float" default="1">2</Parameter>
        <Parameter name="unitType" type="base typedef" default="rotations" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short" default="50">100</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="RepeatUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getTimer(T1, seconds)</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="float">3</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short" default="50">-100</Parameter>
        <Parameter name="firstMotor" type="base typedef" default="motor1" typeDef="tMotor">motor5</Parameter>
        <Parameter name="secondMotor" type="base typedef" default="noMotor" typeDef="tMotor">motor11</Parameter>
        <Parameter name="thirdMotor" type="base typedef" default="noMotor" typeDef="tMotor">noMotor</Parameter>
        <Parameter name="fourthMotor" type="base typedef" default="noMotor" typeDef="tMotor">noMotor</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="functionCall" function="stopMultipleMotors">
    <Parameters>
        <Parameter name="firstMotor" type="base typedef" default="motor1" typeDef="tMotor">motor5</Parameter>
        <Parameter name="secondMotor" type="base typedef" default="noMotor" typeDef="tMotor">motor11</Parameter>
        <Parameter name="thirdMotor" type="base typedef" default="noMotor" typeDef="tMotor">noMotor</Parameter>
        <Parameter name="fourthMotor" type="base typedef" default="noMotor" typeDef="tMotor">noMotor</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftFrontMotor, tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor5,          armMotor,      tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor6,          rightFrontMotor, tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor7,          leftBackMotor, tmotorNone, openLoop)
#pragma config(Motor,  motor11,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         rightBackMotor, tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftFrontMotor, tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor5,          armMotor,      tmotorVexIQ, PIDControl, reversed, encoder)
#pragma config(Motor,  motor6,          rightFrontMotor, tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor7,          leftBackMotor, tmotorNone, openLoop)
#pragma config(Motor,  motor11,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         rightBackMotor, tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	turnLeft(25, degrees, 100);
	moveMotor(motor11, 1.5, rotations, 100);
	stopMotor(motor11);
	forward(2, rotations, 100);
	repeatUntil (getTimer(T1, seconds) == 3) {
		setMultipleMotors(-100, motor5, motor11, noMotor, noMotor);
	}
	stopMultipleMotors(motor5, motor11, noMotor, noMotor);
}
</CSource>
